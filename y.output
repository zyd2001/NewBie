Nonterminals useless in grammar

   expression


Terminals unused in grammar

   IF
   ELSE
   ELSEIF
   FOR
   FOREACH
   CLASS
   RETURN
   BREAK
   CONTINUE
   LP
   RP
   LC
   RC
   LB
   RB
   SEMICOLON
   COMMA
   LOGICAL_AND
   LOGICAL_OR
   EQ
   NE
   GT
   GE
   LT
   LE
   ADD
   SUB
   MUL
   DIV
   MOD
   EXCLAMATION
   DOT
   ADD_ASSIGN
   SUB_ASSIGN
   MUL_ASSIGN
   DIV_ASSIGN
   MOD_ASSIGN
   INCREMENT
   DECREMENT
   comparison_expression


Rules useless in grammar

   13 expression: assignment_expression
   14           | comparison_expression


Grammar

    0 $accept: declaration_statement $end

    1 declaration_statement: declaration_tag IDENTIFIER
    2                      | declaration_tag assignment_expression

    3 assignment_expression: IDENTIFIER ASSIGN_T IDENTIFIER
    4                      | IDENTIFIER ASSIGN_T primary_expression

    5 primary_expression: INT_LITERAL
    6                   | DOUBLE_LITERAL
    7                   | STRING_LITERAL

    8 declaration_tag: INT_T
    9                | DOUBLE_T
   10                | STRING_T
   11                | ARRAY_ASSOC_T
   12                | ARRAY_T


Terminals, with rules where they appear

$end (0) 0
error (256)
INT_LITERAL (258) 5
DOUBLE_LITERAL (259) 6
STRING_LITERAL (260) 7
IDENTIFIER (261) 1 3 4
INT_T (262) 8
DOUBLE_T (263) 9
STRING_T (264) 10
ARRAY_T (265) 12
ARRAY_ASSOC_T (266) 11
IF (267)
ELSE (268)
ELSEIF (269)
FOR (270)
FOREACH (271)
CLASS (272)
RETURN (273)
BREAK (274)
CONTINUE (275)
LP (276)
RP (277)
LC (278)
RC (279)
LB (280)
RB (281)
SEMICOLON (282)
COMMA (283)
ASSIGN_T (284) 3 4
LOGICAL_AND (285)
LOGICAL_OR (286)
EQ (287)
NE (288)
GT (289)
GE (290)
LT (291)
LE (292)
ADD (293)
SUB (294)
MUL (295)
DIV (296)
MOD (297)
EXCLAMATION (298)
DOT (299)
ADD_ASSIGN (300)
SUB_ASSIGN (301)
MUL_ASSIGN (302)
DIV_ASSIGN (303)
MOD_ASSIGN (304)
INCREMENT (305)
DECREMENT (306)
comparison_expression (307)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
declaration_statement (54)
    on left: 1 2, on right: 0
assignment_expression (55)
    on left: 3 4, on right: 2
primary_expression (56)
    on left: 5 6 7, on right: 4
declaration_tag (57)
    on left: 8 9 10 11 12, on right: 1 2


State 0

    0 $accept: . declaration_statement $end

    INT_T          shift, and go to state 1
    DOUBLE_T       shift, and go to state 2
    STRING_T       shift, and go to state 3
    ARRAY_T        shift, and go to state 4
    ARRAY_ASSOC_T  shift, and go to state 5

    declaration_statement  go to state 6
    declaration_tag        go to state 7


State 1

    8 declaration_tag: INT_T .

    $default  reduce using rule 8 (declaration_tag)


State 2

    9 declaration_tag: DOUBLE_T .

    $default  reduce using rule 9 (declaration_tag)


State 3

   10 declaration_tag: STRING_T .

    $default  reduce using rule 10 (declaration_tag)


State 4

   12 declaration_tag: ARRAY_T .

    $default  reduce using rule 12 (declaration_tag)


State 5

   11 declaration_tag: ARRAY_ASSOC_T .

    $default  reduce using rule 11 (declaration_tag)


State 6

    0 $accept: declaration_statement . $end

    $end  shift, and go to state 8


State 7

    1 declaration_statement: declaration_tag . IDENTIFIER
    2                      | declaration_tag . assignment_expression

    IDENTIFIER  shift, and go to state 9

    assignment_expression  go to state 10


State 8

    0 $accept: declaration_statement $end .

    $default  accept


State 9

    1 declaration_statement: declaration_tag IDENTIFIER .
    3 assignment_expression: IDENTIFIER . ASSIGN_T IDENTIFIER
    4                      | IDENTIFIER . ASSIGN_T primary_expression

    ASSIGN_T  shift, and go to state 11

    $default  reduce using rule 1 (declaration_statement)


State 10

    2 declaration_statement: declaration_tag assignment_expression .

    $default  reduce using rule 2 (declaration_statement)


State 11

    3 assignment_expression: IDENTIFIER ASSIGN_T . IDENTIFIER
    4                      | IDENTIFIER ASSIGN_T . primary_expression

    INT_LITERAL     shift, and go to state 12
    DOUBLE_LITERAL  shift, and go to state 13
    STRING_LITERAL  shift, and go to state 14
    IDENTIFIER      shift, and go to state 15

    primary_expression  go to state 16


State 12

    5 primary_expression: INT_LITERAL .

    $default  reduce using rule 5 (primary_expression)


State 13

    6 primary_expression: DOUBLE_LITERAL .

    $default  reduce using rule 6 (primary_expression)


State 14

    7 primary_expression: STRING_LITERAL .

    $default  reduce using rule 7 (primary_expression)


State 15

    3 assignment_expression: IDENTIFIER ASSIGN_T IDENTIFIER .

    $default  reduce using rule 3 (assignment_expression)


State 16

    4 assignment_expression: IDENTIFIER ASSIGN_T primary_expression .

    $default  reduce using rule 4 (assignment_expression)
